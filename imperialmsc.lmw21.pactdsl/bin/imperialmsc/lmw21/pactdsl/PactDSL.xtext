grammar imperialmsc.lmw21.pactdsl.PactDSL with org.eclipse.xtext.common.Terminals

generate pactDSL "http://www.lmw21.imperialmsc/pactdsl/PactDSL"

Model:
	
	'ContractTitle:' title=STRING '.'+
	
	'Entities:' 
	(entityTypes+=EntityType '.')+
	
	'Formalities:'?
	(formalityTypes+=FormalityType '.')*
	
	'Actions:'?
	(actionTypes+=ActionType '.')*
	
	'StateOnSignature:'?
	(stateTypes+=StateType '.')*
	
	'PrimaryObligations:'
	(primaryObligationTypes+=PrimaryObligationType '.')+
	
	'SecondaryObligations:'?
	(secondaryObligationTypes+=SecondaryObligationType '.')*
	
	'Liability'?
	(liabilityTypes+=LiabilityType '.')*

	'Termination:'?
	(terminationTypes+=TerminationType '.')*
	
	'StateAfterContractDischarged:'?
	(stateTypes+=StateType '.')*
	
	'Boilerplate:'?
	(boilerplateTypes+=BoilerplateType '.')*;



//Entity Types	

EntityType:
	EffectiveDate | Party | ThirdParty | SubjectMatter;

EffectiveDate:
	'EffectiveDate:' (day=INT month=INT year=INT)+;

Party:
	'Party:' name=ID fullname=STRING (feature+=Feature)*; 
	 
ThirdParty:
	'ThirdParty:' name=ID fullname=STRING (feature+=Feature)*; 
	
SubjectMatter:
	'SubjectMatter:' name=ID subjectMatter=STRING (feature+=Feature)*; 

Feature:
	featuretype=FeatureType;

FeatureType:
	DefinedTerm | Address | CompanyNumber | CustomFeature;

DefinedTerm:
	'definedAs' definition=STRING;

Address:
	'withAddress' address=STRING;

CompanyNumber:
	'withCompanyNumber' companyNumber=INT;

CustomFeature:
	'withFeature' customFeature=STRING;
	
	
	
//Formality Types

FormalityType:
	InWriting | ByEmail | GivingNotice | CustomFormality;

InWriting:
	'inWriting' customWritingFormality=STRING;

ByEmail:
	'byEmail' 'to' (emailAddress=STRING);
	 
GivingNotice:
	'givingNoticeTo' superType=[Party] ('withDuration' numDays=INT 'days');

CustomFormality:
	'ContractFormality' customFormality=STRING;



//Actions

ActionType:
	GivenConsent | GivenWrittenConsent | CustomAction;

GivenConsent:
	superType=[Party] 'gaveConsent';
	
GivenWrittenConsent:
	superType=[Party] 'gaveWrittenConsent';
	
CustomAction:
	superType=[Party] customAction=STRING;
	

//State on Signature

StateType:
	Ownership | RightToUse | CustomState;

Ownership:
	'Ownership:' superType=[Party] ('owns' | 'mustReturn') (customOwnership=STRING);

RightToUse:
	'RightToUse:' superType=[Party] ('mayUse' | 'mayNotUse') (customUsage=STRING);

CustomState:
	'State:' superType=[Party] customState=STRING;


		
//PrimaryObligations
 
PrimaryObligationType:
	PaymentObligation | DeliveryObligation | TransferObligation | LicenceObligation | ConstraintParty | ConstraintThirdParty | CustomObligation;

PaymentObligation:	
	'PaymentObligation:' superType=[Party] 'must' 'pay' (sum=INT)+ 'to' (superType=[Party])+ ( 'by' 'date' day=INT month=INT year=INT)?;
	
DeliveryObligation:
	'DeliveryObligation:' superType=[Party] 'must' 'deliver' superType=[SubjectMatter]+ 'to' superType=[Party]+ ( 'by' 'date' day=INT month=INT year=INT)?;  

TransferObligation:
	'TransferObligation:' superType=[Party] 'must' 'transfer' superType=[SubjectMatter]+ 'to' superType=[Party]+ ( 'by' 'date' day=INT month=INT year=INT)?;

LicenceObligation:
	'LicenceObligation:' superType=[Party] 'must' 'grant' 'Licence' 'in' superType=[SubjectMatter]+ 'to' superType=[Party]+ ( 'by' 'date' day=INT month=INT year=INT)*; 

ConstraintParty:
	'ConstraintParty:' superType=[Party] 'mustNot' forbiddenAction=STRING superType=[SubjectMatter]? ('to' superType=[Party])?; 	

ConstraintThirdParty:
	'ConstraintThirdParty:' superType=[Party] 'mustNot' forbiddenAction=STRING superType=[SubjectMatter]? (additionalInfo=STRING)? ('to' superType=[ThirdParty])? ('unless' 'withWrittenConsent' 'of' superType=[Party])?;

CustomObligation:
	'CustomObligation:' superType=[Party] ('must' | 'mustNot') customObligation=STRING ( 'by' 'date' day=INT month=INT year=INT)?;



//Secondary Obligations

SecondaryObligationType:
	'SecondaryObligation:' superType=[Party] 'must' 'pay' (sum=INT)+ 'to' (superType=[Party]+) 'uponBreachOf' customPrimaryObligation=STRING;  



//Liability Types

LiabilityType:
	LiabilityToParty | LiabilityToThirdParty;

LiabilityToParty:
	'LiabilityToParty:' superType=[Party] 'shallNotBeLiable' 'to' superType=[Party] 'for' customLoss=STRING ; 

LiabilityToThirdParty:
	'LiabilityToThirdParty:' superType=[Party] 'shallNotBeLiable' 'to' superType=[ThirdParty] 'for' customLoss=STRING;



//Termination Types

TerminationType:
	ForConvenience | OnReasonableNotice | ForBreach | OnInsolvencyEvent | CustomTermination;

ForConvenience:
	'TerminationForConvenience:' superType=[Party]+ 'may' 'terminate' 'by' customTermination=STRING;
	
OnReasonableNotice:
	'TerminationOnReasonableNotice:' superType=[Party]+ 'may' 'terminate' 'by' superType=[GivingNotice] 
;

ForBreach:
	'TerminationForBreach:'	superType=[Party]+ 'may' 'terminate' 'forBreachOf' (ObligationBreached=STRING)+ 'by' superType=[Party] ('unless' remedialScheme=STRING)?;

OnInsolvencyEvent:
	'TerminationUponInsolvency:' superType=[Party]+ 'may' 'terminate' 'upon' (InsolvencyEvent=STRING) 'of' superType=[Party]; 

CustomTermination:
	'Termination:' superType=[Party]+ 'may' 'terminate' customTerminationClause=STRING ( ('by') superType=[GivingNotice] )?;
	 
	
	
//Boilerplate

BoilerplateType:
	ApplicableLaw | Jurisdiction | Notices | CustomBoilerplate;

ApplicableLaw:
	'ApplicableLaw:' customApplicableLaw=STRING (definition+=DefinedTerm)?;
	
Jurisdiction:
	'Jurisdiction:' customJurisdiction=STRING (definition+=DefinedTerm)?;
	
Notices:
	'Notices:' customNotice=STRING;

CustomBoilerplate:
	'Boilerplate:' customBoilerplate=STRING;

