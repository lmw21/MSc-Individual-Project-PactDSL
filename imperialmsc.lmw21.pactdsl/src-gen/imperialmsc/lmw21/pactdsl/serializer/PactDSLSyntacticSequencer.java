/*
 * generated by Xtext 2.25.0
 */
package imperialmsc.lmw21.pactdsl.serializer;

import com.google.inject.Inject;
import imperialmsc.lmw21.pactdsl.services.PactDSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class PactDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PactDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Model_ActionsKeyword_7_q;
	protected AbstractElementAlias match_Model_BoilerplateKeyword_21_q;
	protected AbstractElementAlias match_Model_FormalitiesKeyword_5_q;
	protected AbstractElementAlias match_Model_FullStopKeyword_2_p;
	protected AbstractElementAlias match_Model_LiabilityKeyword_15_q;
	protected AbstractElementAlias match_Model_SecondaryObligationsKeyword_13_q;
	protected AbstractElementAlias match_Model_StateAfterContractDischargedKeyword_19_q;
	protected AbstractElementAlias match_Model_StateOnSignatureKeyword_9_q;
	protected AbstractElementAlias match_Model_TerminationKeyword_17_q;
	protected AbstractElementAlias match_Ownership_MustReturnKeyword_2_1_or_OwnsKeyword_2_0;
	protected AbstractElementAlias match_RightToUse_MayNotUseKeyword_2_1_or_MayUseKeyword_2_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PactDSLGrammarAccess) access;
		match_Model_ActionsKeyword_7_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getActionsKeyword_7());
		match_Model_BoilerplateKeyword_21_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getBoilerplateKeyword_21());
		match_Model_FormalitiesKeyword_5_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getFormalitiesKeyword_5());
		match_Model_FullStopKeyword_2_p = new TokenAlias(true, false, grammarAccess.getModelAccess().getFullStopKeyword_2());
		match_Model_LiabilityKeyword_15_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getLiabilityKeyword_15());
		match_Model_SecondaryObligationsKeyword_13_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getSecondaryObligationsKeyword_13());
		match_Model_StateAfterContractDischargedKeyword_19_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getStateAfterContractDischargedKeyword_19());
		match_Model_StateOnSignatureKeyword_9_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getStateOnSignatureKeyword_9());
		match_Model_TerminationKeyword_17_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getTerminationKeyword_17());
		match_Ownership_MustReturnKeyword_2_1_or_OwnsKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOwnershipAccess().getMustReturnKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getOwnershipAccess().getOwnsKeyword_2_0()));
		match_RightToUse_MayNotUseKeyword_2_1_or_MayUseKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRightToUseAccess().getMayNotUseKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getRightToUseAccess().getMayUseKeyword_2_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Model_ActionsKeyword_7_q.equals(syntax))
				emit_Model_ActionsKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_BoilerplateKeyword_21_q.equals(syntax))
				emit_Model_BoilerplateKeyword_21_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_FormalitiesKeyword_5_q.equals(syntax))
				emit_Model_FormalitiesKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_FullStopKeyword_2_p.equals(syntax))
				emit_Model_FullStopKeyword_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_LiabilityKeyword_15_q.equals(syntax))
				emit_Model_LiabilityKeyword_15_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_SecondaryObligationsKeyword_13_q.equals(syntax))
				emit_Model_SecondaryObligationsKeyword_13_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_StateAfterContractDischargedKeyword_19_q.equals(syntax))
				emit_Model_StateAfterContractDischargedKeyword_19_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_StateOnSignatureKeyword_9_q.equals(syntax))
				emit_Model_StateOnSignatureKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_TerminationKeyword_17_q.equals(syntax))
				emit_Model_TerminationKeyword_17_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ownership_MustReturnKeyword_2_1_or_OwnsKeyword_2_0.equals(syntax))
				emit_Ownership_MustReturnKeyword_2_1_or_OwnsKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RightToUse_MayNotUseKeyword_2_1_or_MayUseKeyword_2_0.equals(syntax))
				emit_RightToUse_MayNotUseKeyword_2_1_or_MayUseKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Actions:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     entityTypes+=EntityType '.' 'Formalities:'? (ambiguity) 'StateOnSignature:'? 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     entityTypes+=EntityType '.' 'Formalities:'? (ambiguity) 'StateOnSignature:'? stateTypes+=StateType
	 *     entityTypes+=EntityType '.' 'Formalities:'? (ambiguity) actionTypes+=ActionType
	 *     formalityTypes+=FormalityType '.' (ambiguity) 'StateOnSignature:'? 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     formalityTypes+=FormalityType '.' (ambiguity) 'StateOnSignature:'? stateTypes+=StateType
	 *     formalityTypes+=FormalityType '.' (ambiguity) actionTypes+=ActionType
	 */
	protected void emit_Model_ActionsKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Boilerplate:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     liabilityTypes+=LiabilityType '.' 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) (rule end)
	 *     liabilityTypes+=LiabilityType '.' 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) boilerplateTypes+=BoilerplateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) (rule end)
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) boilerplateTypes+=BoilerplateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) (rule end)
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? (ambiguity) boilerplateTypes+=BoilerplateType
	 *     stateTypes+=StateType '.' (ambiguity) (rule end)
	 *     stateTypes+=StateType '.' (ambiguity) boilerplateTypes+=BoilerplateType
	 *     terminationTypes+=TerminationType '.' 'StateAfterContractDischarged:'? (ambiguity) (rule end)
	 *     terminationTypes+=TerminationType '.' 'StateAfterContractDischarged:'? (ambiguity) boilerplateTypes+=BoilerplateType
	 */
	protected void emit_Model_BoilerplateKeyword_21_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Formalities:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     entityTypes+=EntityType '.' (ambiguity) 'Actions:'? 'StateOnSignature:'? 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     entityTypes+=EntityType '.' (ambiguity) 'Actions:'? 'StateOnSignature:'? stateTypes+=StateType
	 *     entityTypes+=EntityType '.' (ambiguity) 'Actions:'? actionTypes+=ActionType
	 *     entityTypes+=EntityType '.' (ambiguity) formalityTypes+=FormalityType
	 */
	protected void emit_Model_FormalitiesKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.'+
	 *
	 * This ambiguous syntax occurs at:
	 *     title=STRING (ambiguity) 'Entities:' entityTypes+=EntityType
	 */
	protected void emit_Model_FullStopKeyword_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Liability'?
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? (ambiguity) 'Termination:'? terminationTypes+=TerminationType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? (ambiguity) liabilityTypes+=LiabilityType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     secondaryObligationTypes+=SecondaryObligationType '.' (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' (ambiguity) 'Termination:'? 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' (ambiguity) 'Termination:'? terminationTypes+=TerminationType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' (ambiguity) liabilityTypes+=LiabilityType
	 */
	protected void emit_Model_LiabilityKeyword_15_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'SecondaryObligations:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) 'Liability'? 'Termination:'? 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) 'Liability'? 'Termination:'? terminationTypes+=TerminationType
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) 'Liability'? liabilityTypes+=LiabilityType
	 *     primaryObligationTypes+=PrimaryObligationType '.' (ambiguity) secondaryObligationTypes+=SecondaryObligationType
	 */
	protected void emit_Model_SecondaryObligationsKeyword_13_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'StateAfterContractDischarged:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     liabilityTypes+=LiabilityType '.' 'Termination:'? (ambiguity) 'Boilerplate:'? (rule end)
	 *     liabilityTypes+=LiabilityType '.' 'Termination:'? (ambiguity) 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     liabilityTypes+=LiabilityType '.' 'Termination:'? (ambiguity) stateTypes+=StateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? 'Termination:'? (ambiguity) 'Boilerplate:'? (rule end)
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? 'Termination:'? (ambiguity) 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? 'Termination:'? (ambiguity) stateTypes+=StateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? 'Termination:'? (ambiguity) 'Boilerplate:'? (rule end)
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? 'Termination:'? (ambiguity) 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? 'Termination:'? (ambiguity) stateTypes+=StateType
	 *     terminationTypes+=TerminationType '.' (ambiguity) 'Boilerplate:'? (rule end)
	 *     terminationTypes+=TerminationType '.' (ambiguity) 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     terminationTypes+=TerminationType '.' (ambiguity) stateTypes+=StateType
	 */
	protected void emit_Model_StateAfterContractDischargedKeyword_19_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'StateOnSignature:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     actionTypes+=ActionType '.' (ambiguity) 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     actionTypes+=ActionType '.' (ambiguity) stateTypes+=StateType
	 *     entityTypes+=EntityType '.' 'Formalities:'? 'Actions:'? (ambiguity) 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     entityTypes+=EntityType '.' 'Formalities:'? 'Actions:'? (ambiguity) stateTypes+=StateType
	 *     formalityTypes+=FormalityType '.' 'Actions:'? (ambiguity) 'PrimaryObligations:' primaryObligationTypes+=PrimaryObligationType
	 *     formalityTypes+=FormalityType '.' 'Actions:'? (ambiguity) stateTypes+=StateType
	 */
	protected void emit_Model_StateOnSignatureKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Termination:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     liabilityTypes+=LiabilityType '.' (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     liabilityTypes+=LiabilityType '.' (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     liabilityTypes+=LiabilityType '.' (ambiguity) 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     liabilityTypes+=LiabilityType '.' (ambiguity) terminationTypes+=TerminationType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     primaryObligationTypes+=PrimaryObligationType '.' 'SecondaryObligations:'? 'Liability'? (ambiguity) terminationTypes+=TerminationType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? (rule end)
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? 'Boilerplate:'? boilerplateTypes+=BoilerplateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? (ambiguity) 'StateAfterContractDischarged:'? stateTypes+=StateType
	 *     secondaryObligationTypes+=SecondaryObligationType '.' 'Liability'? (ambiguity) terminationTypes+=TerminationType
	 */
	protected void emit_Model_TerminationKeyword_17_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'owns' | 'mustReturn'
	 *
	 * This ambiguous syntax occurs at:
	 *     superType=[Party|ID] (ambiguity) customOwnership=STRING
	 */
	protected void emit_Ownership_MustReturnKeyword_2_1_or_OwnsKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'mayUse' | 'mayNotUse'
	 *
	 * This ambiguous syntax occurs at:
	 *     superType=[Party|ID] (ambiguity) customUsage=STRING
	 */
	protected void emit_RightToUse_MayNotUseKeyword_2_1_or_MayUseKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
